# -*- coding: utf-8 -*-
"""heart disease prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OAiOVSOPjT454T7upWHVfLTWsPZaxUKb
"""

#import the libraries
import numpy as np #to work with arrays
import pandas as pd #to work with the data
#importing sk learn library/modules
from sklearn.model_selection import train_test_split #module to split the data into training and testing
from sklearn.linear_model import LogisticRegression #to build the model - Corrected the import statement to LogisticRegression
from sklearn.metrics import accuracy_score #evaluation

#import the data
db=pd.read_csv('/content/heart.csv')

db.head()

#dimension of data
db.shape

db.info()

#missing values
db.isnull().sum()

#descriptive statstics
db.describe()

#how many people hart disease 1=heart disease 0=healty
db['target'].value_counts()

"""spliting features and target

"""

X=db.drop(columns='target',axis=1)
X

Y=db['target']
Y

"""Training and Testing"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=42)

X.shape

X_train.shape

X_test.shape

Y_train.shape

Y_test.shape

"""model building


logistic regression is used to create the model where end of the it is a binary classification

"""

model=LogisticRegression()

#Train the model
model.fit(X_train,Y_train)

"""Evaluation"""

#accuracy_score on train data
X_train_prediction=model.predict(X_train)
training_accuracy=accuracy_score(X_train_prediction,Y_train)
print(f" the training accuracy is {training_accuracy}")

#accuracy_score on test data
X_test_prediction=model.predict(X_test)
test_accuracy=accuracy_score(X_test_prediction,Y_test)
print(f" the test accuracy is {test_accuracy}")

"""predicting system"""

#tuple of the feature data as input
input_data=(52,1,0,125,212,0,1,168,0,1,2,2,3,)
#converting numpy array
input_data=np.asarray(input_data)
#reshaping
input_data=input_data.reshape(1,-1)
#with the input pridiction
prediction=model.predict(input_data)
prediction

if prediction[0]==0:
  print("the person does not have heart disease")
else:
  print("the person has heart disease")